@using OzyParkAdmin.Domain.CategoriasProducto
@using OzyParkAdmin.Domain.CentrosCosto
@using OzyParkAdmin.Domain.Contabilidad
@using OzyParkAdmin.Domain.Productos
@inject ProductoViewModelValidator Validator
<MudDialog Options="DialogOptions" Visible="IsOpen" VisibleChanged="ChangeIsOpen">
    <DialogContent>
        <IfThen Condition="Producto.Loading">
            <Then>
                <MudProgressLinear Color="@Color.Primary" Class="mud-table-loading-progress" Indeterminate="true" />
            </Then>
        </IfThen>
        <MudForm Model="Producto" @ref="form" Validation="Validator.ValidateValue" ValidationDelay="0">
            <MudSelect T="int" Value="Producto.FranquiciaId" ValueChanged="FranquiciaChanged" Variant="Variant.Outlined" Margin="Margin.Dense"
                       Label="Franquicia" Required="true" Class="mt-4" ToStringFunc="GetFranquicia"
                       Disabled="!Producto.IsNew" For="() => Producto.FranquiciaId" Immediate="true">
                <ForIn Items="Franquicias" Context="franquicia">
                    <MudSelectItem T="int" Value="franquicia.Id"></MudSelectItem>
                </ForIn>
            </MudSelect>

            <MudSelect @bind-Value="Producto.CentroCosto" Variant="Variant.Outlined" Margin="Margin.Dense"
                       Label="Centro de costo" ToStringFunc="(x) => x?.Descripcion" Class="mt-4"
                       Disabled="!Producto.IsNew" For="() => Producto.CentroCosto" Immediate="true">
                <ForIn Items="CentrosCosto" Context="centroCosto">
                    <MudSelectItem T="CentroCostoInfo" Value="centroCosto"></MudSelectItem>
                </ForIn>
            </MudSelect>

            <MudStack Row="true" Class="mt-4">
                <MudSelect T="CategoriaProductoInfo" Value="Producto.Categoria" ValueChanged="CategoriaChanged" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Label="Categoria" ToStringFunc="(x) => x?.NombreCompleto"
                           For="() => Producto.Categoria" Immediate="true">

                    <ForIn Items="categorias" Context="categoria">
                        <MudSelectItem T="CategoriaProductoInfo" Value="categoria"></MudSelectItem>
                    </ForIn>

                </MudSelect>

                <MudSelect @bind-Value="Producto.CategoriaDespliegue" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Label="Categoria de despliegue" ToStringFunc="(x) => x?.NombreCompleto"
                           For="() => Producto.CategoriaDespliegue" Immediate="true">
                    <ForIn Items="categorias" Context="categoria">
                        <MudSelectItem T="CategoriaProductoInfo" Value="categoria"></MudSelectItem>
                    </ForIn>
                </MudSelect>
            </MudStack>

            <MudSelect @bind-Value="Producto.Familia" Variant="Variant.Outlined" Margin="Margin.Dense"
                       Label="Familia" For="() => Producto.Familia" Immediate="true" Class="mt-4"
                       ToStringFunc="(x) => x?.Nombre">
                <ForIn Items="Familias" Context="familia">
                    <MudSelectItem T="AgrupacionContable" Value="familia" />
                </ForIn>
            </MudSelect>

            <MudStack Row="true" Class="mt-4">
                <MudTextField @bind-Value="Producto.Sku" Variant="Variant.Outlined" Margin="Margin.Dense"
                              Label="Sku" For="() => Producto.Sku" Immediate="true" />
                <MudTextField @bind-Value="Producto.Aka" Variant="Variant.Outlined" Margin="Margin.Dense"
                              Label="Aka" For="() => Producto.Aka" Immediate="true" />
            </MudStack>

            <MudTextField @bind-Value="Producto.Nombre" Variant="Variant.Outlined" Margin="Margin.Dense"
                          Label="Nombre" Class="mt-4" For="() => Producto.Nombre" Immediate="true" />

            <MudStack Row="true" Class="mt-4">
                <MudSelect @bind-Value="Producto.TipoProducto" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Label="Tipo producto" For="() => Producto.TipoProducto" Immediate="true"
                           ToStringFunc="x => x?.Nombre">
                    <ForIn Items="TiposProducto" Context="tipo">
                        <MudSelectItem T="TipoProducto" Value="tipo"></MudSelectItem>
                    </ForIn>
                </MudSelect>

                <MudDatePicker @bind-Date="Producto.FechaAltaDate" Variant="Variant.Outlined" Margin="Margin.Dense"
                               Label="Fecha de alta" For="() => Producto.FechaAltaDate" ImmediateText="true" />

                <MudNumericField @bind-Value="Producto.Orden" Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Label="Orden" For="() => Producto.Orden" Immediate="true"
                                 Min="OneInt" Max="MaxInt" />
            </MudStack>

            <ImageViewer Imagen="Producto.Imagen" Class="mt-4" />

            <MudSwitch T="bool" Value="Producto.EsComplemento" ValueChanged="EsComplementoChanged" Label="Es complemento" Color="Color.Primary" Class="mt-4" />

            <IfThen Condition="PuedeAsociarComplementos">
                <Then>
                    <MudStack Row="true" Spacing="2" Class="mt-4">
                        <MudPaper>
                            <MudList T="ProductoInfo" SelectedValues="_complementosSelecionados" SelectedValuesChanged="SelectComplementos" SelectionMode="SelectionMode.MultiSelection" CheckBoxColor="Color.Tertiary">
                                <MudListSubheader>
                                    Seleccione los complementos
                                </MudListSubheader>
                                <ForIn Items="complementos" Context="complemento">
                                    <MudListItem T="ProductoInfo" Value="complemento" Text="@complemento.Nombre" />
                                </ForIn>
                            </MudList>
                        </MudPaper>

                        <MudPaper>
                            <MudDataGrid T="ProductoComplementarioModel" Items="_complementosProducto" ReadOnly="false" Filterable="false" EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick">
                                <Columns>
                                    <PropertyColumn Property="x => x.Complemento.Nombre" Editable="false" />
                                    <PropertyColumn Property="x => x.Orden">
                                        <EditTemplate>
                                            <MudNumericField @bind-Value="context.Item.Orden" Margin="Margin.Dense" Min="1" Max="int.MaxValue"
                                                             Required="true" Variant="@Variant.Text" Style="margin-top:0" />

                                        </EditTemplate>
                                    </PropertyColumn>
                                    <TemplateColumn Editable="true">
                                        <EditTemplate>
                                            <MudTooltip Text="Eliminar">
                                                <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" OnClick="() => RemoveComplemento(context)" />
                                            </MudTooltip>
                                        </EditTemplate>
                                    </TemplateColumn>
                                </Columns>
                            </MudDataGrid>
                        </MudPaper>
                    </MudStack>
                </Then>
            </IfThen>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="CancelEditingItemAsync" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CommitItemChangesAsync" Class="px-10">Guardar</MudButton>
    </DialogActions>
</MudDialog>

    private void PrepareProducto()
    {
        /*
        /// <remarks>
        /// La busqueda se hace en la clase <see cref="CategoriaProductoInfo" /> el método <see cref="CategoriaProductoInfo.Equals(CategoriaProductoInfo?)" />.
        /// </remarks>

        int categoriaId = categorias.IndexOf(Producto!.Categoria);
        int categoriaDespliegueId = categorias.IndexOf(Producto!.CategoriaDespliegue);


        if (categoriaId >= 0)
        {
            Producto.Categoria.NombreCompleto = categorias[categoriaId].NombreCompleto;
        }

        if (categoriaDespliegueId >= 0)
        {
            Producto.CategoriaDespliegue.NombreCompleto = categorias[categoriaDespliegueId].NombreCompleto;
        }
        */

        string? nombreCompleto = categorias.Where(w => w.Id == Producto!.Categoria.Id).Select(s => s.NombreCompleto).FirstOrDefault();
        if (!string.IsNullOrEmpty(nombreCompleto))
        {
            Producto.Categoria.NombreCompleto = nombreCompleto;
        }

        string? nombreCompletoDespliegue = categorias.Where(w => w.Id == Producto!.CategoriaDespliegue.Id).Select(s => s.NombreCompleto).FirstOrDefault();
        if (!string.IsNullOrEmpty(nombreCompletoDespliegue))
        {
            Producto.CategoriaDespliegue.NombreCompleto = nombreCompletoDespliegue;
        }
