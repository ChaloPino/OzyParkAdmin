@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using OzyParkAdmin.Domain.Seguridad.Usuarios

@inject IdentityRedirectManager RedirectManager
@inject UserManager<Usuario> UserManager

<PageTitle>Resetear contraseña</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem>
        <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="forgot">
            <DataAnnotationsValidator />

            <MudText Typo="Typo.h4" Align="Align.Center">Resetee su contraseña</MudText>

            <MudStaticTextField @bind-Value="Input.Email" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Email" autocomplete="username"
                                Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Ingrese su email" For="() => Input.Email" />

            <MudStaticTextField @bind-Value="Input.Password" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.VisibilityOff" autocomplete="password"
                                Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Ingrese su contraseña" For="() => Input.Password" InputType="InputType.Password" />

            <MudStaticTextField @bind-Value="Input.ConfirmPassword" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.VisibilityOff" autocomplete="confirmpassword"
                                Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Confirme su contraseña" For="() => Input.ConfirmPassword" InputType="InputType.Password" />

            <MudStaticButton Class="my-4" FormAction="FormAction.Submit" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">Resetear</MudStaticButton>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
