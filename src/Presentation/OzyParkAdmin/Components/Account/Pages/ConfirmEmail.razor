@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using OzyParkAdmin.Domain.Seguridad.Usuarios
@using System.ComponentModel.DataAnnotations

@inject UserManager<Usuario> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirmación de correo electrónico</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <MudText Typo="Typo.h4" Align="Align.Center">Confirmación de correo electrónico</MudText>
        <MudText Typo="Typo.body1" Align="Align.Center">@statusMessage</MudText>
    </MudItem>
</MudGrid>

@code {
    private string? statusMessage;
    private Usuario? user;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        user = await UserManager.FindByIdAsync(UserId);

        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error al cargar el usuario con ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Gracias por confirmar su correo electrónico." : "Error al confirmar su correo electrónico.";

            if (user.PasswordHash is null)
            {
                RedirectManager.RedirectTo("Account/CreatePassword", new Dictionary<string, object?>
                {
                    ["userId"] = UserId
                });
            }
        }
    }
}
