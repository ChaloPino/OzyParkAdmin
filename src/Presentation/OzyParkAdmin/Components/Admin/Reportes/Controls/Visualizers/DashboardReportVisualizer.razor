@using MudBlazor.Utilities
@using OzyParkAdmin.Application.Reportes.Charts
@using OzyParkAdmin.Components.Admin.Reportes.Controls.Visualizers.Charts
@using OzyParkAdmin.Domain.Reportes.Charts
@using System.Xml.Linq
@inherits ReportVisualizerBase

<IfThen Condition="Report is not null">
    <Then>
        <SwitchCase T="LoadingState" Value="Loading">
            <CaseWhen T="LoadingState" Condition="loading => loading == LoadingState.Loading">
                <IfThenElse Condition="HasLayout">
                    <Then>
                        @RenderLayout()
                    </Then>
                    <Else>
                        <MudGrid Spacing="2">
                            <ForIn Items="Report!.Charts" Context="chart">
                                <MudItem xs="12" md="MdSize">
                                    <MudPaper Elevation="2" Class="pa-2">
                                        @RenderChartSkeleton(chart.Type, $"height: {GetHeight(chart.Height)};" )
                                    </MudPaper>
                                </MudItem>
                            </ForIn>
                        </MudGrid>
                    </Else>
                </IfThenElse>
            </CaseWhen>
            <CaseWhen T="LoadingState" Condition="loading => loading == LoadingState.Loaded">
                <IfThenElse Condition="HasLayout">
                    <Then>
                        @RenderLayout()
                    </Then>
                    <Else>
                        <MudGrid Spacing="2">
                            <ForIn Items="Charts" Context="chart">
                                <MudItem xs="12" md="MdSize">
                                    <MudPaper Elevation="2" Class="pa-2">
                                        <ChartVisualizer ChartMetaInfo="chart" Height="@GetHeight(chart.Heigth)" Width="@chart.Width" />
                                    </MudPaper>
                                </MudItem>
                            </ForIn>
                        </MudGrid>
                    </Else>
                </IfThenElse>
            </CaseWhen>
        </SwitchCase>
    </Then>
</IfThen>

@code {
    private const string defaultHeight = "300px";

    [Parameter]
    public ChartReport? Report { get; set; }

    private bool HasLayout => Report!.Layout is not null;

    private int MdSize => 12 / (Report!.ChartsPerRow ?? 1);

    [Parameter]
    public IEnumerable<ChartMetaInfo> Charts { get; set; } = [];

    private string GetHeight(string? height)
    {
        return height ?? defaultHeight;
    }

    private RenderFragment? RenderLayout()
    {
        string layout = Report!.Layout!;

        XDocument document = XDocument.Parse($"<div>{layout}</div>");

        return RenderElement(document.Root!);
    }

    private RenderFragment? RenderElement(XElement element)
    {
        string? className = element.Attribute("class")?.Value;

        if (className is not null)
        {
            if (className.Contains("row "))
            {
                return RenderMudGrid(className, element);
            }

            if (className.Contains("col "))
            {
                var content = element.Element("div");
                if (content is not null)
                {
                    return RenderContent(element.Element("div")!);
                }
            }
        }
        return
        @<text>
        @foreach (XElement childElement in element.Elements())
        {
            @RenderElement(childElement)
        }
        </text>;
    }

    private RenderFragment RenderMudGrid(string className, XElement element) =>
    @<text>
    @{
        string[] classes = className.Split(' ');
        (SizeLayout size, Justify justify) = ParseSize(classes);
        <MudGrid Justify="justify" Spacing="3" Class="mt-3">
        @foreach (var childElement in element.Elements())
        {
            <MudItem xs="size.xs" sm="size.sm" md="size.md" lg="size.md" xl="size.xl" xxl="size.xxl">
                @RenderElement(childElement)
            </MudItem>
        }
        </MudGrid>
    }
    </text>
    ;

    private RenderFragment RenderContent(XElement element)
    {
        string[]? classes = element.Attribute("class")?.Value.Split(' ');

        if (classes is null)
        {
            return RenderContentPaper(element);
        }

        return RenderContentByClass(classes, element);
    }

    private RenderFragment RenderContentPaper(XElement element) =>
    @<text>
    @{
        string chartName = element.Value.Trim().Trim('@');
        var chart = Report!.Charts.First(x => string.Equals(chartName, x.Name));
        string height = chart.Height ?? defaultHeight;
        string style = $"height: {height};";
    }
    <MudPaper Elevation="2" Class="pa-2">
        <IfThenElse Condition="Loading == LoadingState.Loaded">
            <Then>
                @RenderChart(chartName, height, chart.Width)
            </Then>
            <Else>
                @RenderChartSkeleton(chart.Type, style)
            </Else>
        </IfThenElse>
    </MudPaper>
    </text>
    ;

    private RenderFragment RenderContentByClass(string[] classes, XElement element) =>
    @<text>
    @{
        string chartName = element.Value.Trim().Trim('@');
        var chart = Report!.Charts.First(x => string.Equals(chartName, x.Name));
        string height = chart.Height ?? defaultHeight;
        string skeletonStyle = $"height: {height};";
        bool isCard = classes.Any(x => x.StartsWith("card"));
    }
    <IfThenElse Condition="isCard">
        <Then>
            <MudCard Elevation="2" Class="pa-2">
                <MudCardContent>
                    <IfThenElse Condition="Loading == LoadingState.Loaded">
                        <Then>
                            @RenderChart(chartName, height, chart.Width)
                        </Then>
                        <Else>
                            @RenderChartSkeleton(chart.Type, skeletonStyle)
                        </Else>
                    </IfThenElse>
                </MudCardContent>
            </MudCard>
        </Then>
        <Else>
            @RenderContentPaper(element)
        </Else>
    </IfThenElse>
    </text>
    ;

    private RenderFragment RenderChart(string name, string height, string? width) =>
    @<text>
    @{
        var chart = Charts.First(x => string.Equals(name, x.Name));
    }
    <ChartVisualizer ChartMetaInfo="chart" Height="@height" Width="@width" />
    </text>;

    private RenderFragment RenderChartSkeleton(OzyParkAdmin.Domain.Reportes.Charts.ChartType? type, string style) =>
    @<text>
        <IfThenElse Condition="type == Domain.Reportes.Charts.ChartType.Table">
            <Then>
                <MudStack Row="false" AlignItems="AlignItems.Stretch" Justify="Justify.FlexStart" Style="@style">
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse mb-1" Height="250px" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse" Height="100px" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse" Height="100px" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse" Height="100px" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse" Height="100px" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse" Height="100px" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse" Height="100px" />
                </MudStack>
            </Then>
            <Else>
                <MudStack Row="true" AlignItems="AlignItems.End" Justify="Justify.Center" Style="@style">
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse py-18 px-5" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse py-10 px-5" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse py-20 px-5" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse py-15 px-5" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse py-8 px-5" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse py-14 px-5" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse py-18 px-5" />
                    <MudPaper Class="mud-skeleton mud-skeleton-pulse py-7 px-5" />
                </MudStack>
            </Else>
        </IfThenElse>
        
    </text>;


    private (SizeLayout size, Justify justify) ParseSize(string[] classes)
    {
        int xs = 0, sm = 0, md = 0, lg = 0, xl = 0, xxl = 0;
        Justify justify = Justify.FlexStart;

        for (int i = 0; i < classes.Length; i++)
        {
            if (classes[i].StartsWith("row-cols-"))
            {
                string[] parts = classes[i].Split('-');

                if (parts.Length == 3)
                {
                    xs = 12 / int.Parse(parts[2]);
                    continue;
                }

                if (parts.Length == 4)
                {
                    switch (parts[2])
                    {
                        case "xs":
                            xs = 12 / int.Parse(parts[3]);
                            break;
                        case "sm":
                            sm = 12 / int.Parse(parts[3]);
                            break;
                        case "md":
                            md = 12 / int.Parse(parts[3]);
                            break;
                        case "lg":
                            lg = 12 / int.Parse(parts[3]);
                            break;
                        case "xl":
                            xl = 12 / int.Parse(parts[3]);
                            break;
                        case "xxl":
                            xxl = 12 / int.Parse(parts[3]);
                            break;
                    }
                }

                continue;
            }

            if (classes[i].StartsWith("justify-content-"))
            {
                string[] parts = classes[i].Split('-');

                justify = parts[2] switch
                {
                    "center" => Justify.Center,
                    "start" => Justify.FlexStart,
                    "end" => Justify.FlexEnd,
                    "between" => Justify.SpaceBetween,
                    "around" => Justify.SpaceAround,
                    "evenly" => Justify.SpaceEvenly,
                    _ => Justify.FlexStart,
                };
            }
        }

        return (new SizeLayout(xs, sm, md, lg, xl, xxl), justify);
    }
}
