@using OzyParkAdmin.Domain.CanalesVenta
@using OzyParkAdmin.Domain.CentrosCosto
@using OzyParkAdmin.Domain.Entidades
@using OzyParkAdmin.Domain.EscenariosCupo
@inject FechasExcluidasCupoModelValidator Validator

<MudDialog Options="DialogOptions" Visible="IsOpen" VisibleChanged="ChangeIsOpen">
    <DialogContent>
        <MudText Typo="Typo.h4" GutterBottom="true">Crear fechas excluidas para los cupos</MudText>
        <IfThen Condition="fechasExcluidas.Loading">
            <Then>
                <MudProgressLinear Color="@Color.Primary" Class="mud-table-loading-progress" Indeterminate="true" />
            </Then>
        </IfThen>
        <MudForm @ref="form" Model="fechasExcluidas" Validation="Validator.ValidateValue" ValidationDelay="0">

            <MudGrid Spacing="3" Class="mt-4">
                <MudItem xs="4">
                    <MudDateRangePicker @bind-DateRange="fechasExcluidas.RangoFechas"
                                        Label="Rango de fechas"
                                        Variant="Variant.Outlined"
                                        Margin="Margin.Dense"
                                        AutoClose="true"
                                        For="() => fechasExcluidas.RangoFechas.Start"
                                        Editable="true"
                                        MinDate="DateTime.Today"
                                        ImmediateText="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudSelect @bind-Value="fechasExcluidas.CentroCosto"
                               Label="Escenario"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               Dense="true"
                               ToStringFunc="x => x?.Descripcion"
                               For="() => fechasExcluidas.CentroCosto">
                        <ForIn Items="CentrosCosto" Context="centroCosto">
                            <MudSelectItem T="CentroCostoInfo" Value="centroCosto" />
                        </ForIn>
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect @bind-SelectedValues="fechasExcluidas.CanalesVenta"
                               SelectAll="true"
                               SelectAllText="Seleccionar todos"
                               Label="Canales de venta"
                               MultiSelection="true"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               Dense="true"
                               ToStringFunc="x => x?.Nombre"
                               MultiSelectionTextFunc="CanalesVentaDescriptions"
                               For="() => fechasExcluidas.ValidationCanalVenta">
                        <ForIn Items="CanalesVenta" Context="canalVenta">
                            <MudSelectItem T="CanalVenta" Value="canalVenta" />
                        </ForIn>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="CancelEditingItemAsync" Disabled="fechasExcluidas.Loading" Class="px-10">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CommitItemChangesAsync" Disabled="fechasExcluidas.Loading" Class="px-10">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MudForm form = default!;
    private FechasExcluidasCupoModel fechasExcluidas = new();

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public Func<FechasExcluidasCupoModel, Task<bool>>? CommitChanges { get; set; }

    [Parameter]
    public DialogOptions? DialogOptions { get; set; }

    [Parameter]
    public List<CentroCostoInfo> CentrosCosto { get; set; } = [];

    [Parameter]
    public List<CanalVenta> CanalesVenta { get; set; } = [];

    private string CanalesVentaDescriptions(List<string> canalesVenta)
    {
        if (canalesVenta.Count == 0)
        {
            return "Seleccione canales de venta";
        }
        if (canalesVenta.Count == 1)
        {
            return canalesVenta[0];
        }

        return $"{canalesVenta.Count} canales de venta seleccionados";
    }

    private async Task ChangeIsOpen(bool isOpen)
    {
        IsOpen = isOpen;
        fechasExcluidas = new();
        await IsOpenChanged.InvokeAsync(isOpen);
    }

    private async Task CommitItemChangesAsync()
    {
        if (fechasExcluidas is not null && CommitChanges is not null)
        {
            await form.Validate();

            if (form.IsValid)
            {
                fechasExcluidas.Loading = true;
                bool result = await CommitChanges(fechasExcluidas);

                if (result)
                {
                    await ChangeIsOpen(false);
                }

                fechasExcluidas.Loading = false;
            }
        }
    }

    private async Task CancelEditingItemAsync()
    {
        await ChangeIsOpen(false);
    }
}
