namespace OzyParkAdmin.UnionType.Generator.Tests;

/// <summary>
/// Tests for <see cref="TypeUnionSourceGenerator"/>.
/// </summary>
public class TypeUnionTests
{
    /// <summary>
    /// Given A ResultOf And Failure Classes Then Generate A TypeUnion
    /// </summary>
    [Fact]
    public void Given_A_ResultOf_And_Failure_Classes_Then_Generate_A_TypeUnion()
    {
        const string input = """
using TypeUnions;
namespace MyNamespace;

public readonly struct Unknown;
public readonly struct NotFound;
public readonly struct Conflict;
public readonly struct Forbid;
public readonly struct Unauthorized;
public readonly struct Validation;


//[TypeUnion<Unknown, NotFound, Conflict, Forbid, Unauthorized, Validation>]
//public readonly partial struct Failure
//{
//}

//[TypeUnion<Failure>]
//[ReplaceParameter("Value", ForName="Success")]
//public partial class ResultOf<TValue> where TValue : struct
//{
//}

[TypeUnion<bool, Unknown>(Name0 = "BoolValue")]
public partial class ChartParsing
{
}

""";

        const string expectedResultOf = """
// <auto-generated />
#pragma warning disable 1591
#nullable enable

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using System.Threading.Tasks;
using static TypeUnions.Functions;

namespace MyNamespace;
partial class ResultOf<TValue> : IEquatable<ResultOf<TValue>>
{
    private readonly int index;
    private readonly TValue? success;
    private readonly global::MyNamespace.Failure failure;

    private ResultOf(int index, TValue? success = default, global::MyNamespace.Failure failure = default)
    {
        this.index = index;
        this.success = success;
        this.failure = failure;
    }

    /// <summary>
    /// Executes the switch pattern for each of the members of the <see cref="ResultOf{TValue}" />.
    /// </summary>
    /// <param name="onSuccess">the action that runs when the switch pattern finds has a value for success member.</param>
    /// <param name="onFailure">the action that runs when the switch pattern finds has a value for failure member.</param>
    /// <exception cref="UnreachableException">
    /// If none of the actions can be executed.
    /// </exception>
    public void Switch(Action<TValue> onSuccess, Action<global::MyNamespace.Failure> onFailure)
    {
        if (index == 0 && onSuccess is not null)
        {
            onSuccess(success!);
            return;
        }

        if (index == 1 && onFailure is not null)
        {
            onFailure(failure);
            return;
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the switch pattern for each of the members of the <see cref="ResultOf{TValue}" />.
    /// </summary>
    /// <param name="onSuccess">the action that runs when the switch pattern finds has a value for success member.</param>
    /// <param name="onFailure">the action that runs when the switch pattern finds has a value for failure member.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the actions can be executed.
    /// </exception>
    public async Task SwitchAsync(Func<TValue, CancellationToken, Task> onSuccess, Func<global::MyNamespace.Failure, CancellationToken, Task> onFailure, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onSuccess is not null)
        {
            await onSuccess(success!, cancellationToken).ConfigureAwait(false);
            return;
        }

        if (index == 1 && onFailure is not null)
        {
            await onFailure(failure, cancellationToken).ConfigureAwait(false);
            return;
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the switch pattern for each of the members of the <see cref="ResultOf{TValue}" />.
    /// </summary>
    /// <param name="onSuccess">the action that runs when the switch pattern finds has a value for success member.</param>
    /// <param name="onFailure">the action that runs when the switch pattern finds has a value for failure member.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the actions can be executed.
    /// </exception>
    public async Task SwitchAsync(Action<TValue> onSuccess, Func<global::MyNamespace.Failure, CancellationToken, Task> onFailure, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onSuccess is not null)
        {
            onSuccess(success!);
            return;
        }

        if (index == 1 && onFailure is not null)
        {
            await onFailure(failure, cancellationToken).ConfigureAwait(false);
            return;
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the switch pattern for each of the members of the <see cref="ResultOf{TValue}" />.
    /// </summary>
    /// <param name="onSuccess">the action that runs when the switch pattern finds has a value for success member.</param>
    /// <param name="onFailure">the action that runs when the switch pattern finds has a value for failure member.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the actions can be executed.
    /// </exception>
    public async Task SwitchAsync(Func<TValue, CancellationToken, Task> onSuccess, Action<global::MyNamespace.Failure> onFailure, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onSuccess is not null)
        {
            await onSuccess(success!, cancellationToken).ConfigureAwait(false);
            return;
        }

        if (index == 1 && onFailure is not null)
        {
            onFailure(failure);
            return;
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes the matching pattern for each of the members of the <see cref="ResultOf{TValue}" />, and returns a <typeparamref name="TResult"/> as a result.
    /// </summary>
    /// <typeparam name="TResult">The type of the expected result.</typeparam>
    /// <param name="onSuccess">the function that runs when the matching pattern finds has a value for success member.</param>
    /// <param name="onFailure">the function that runs when the matching pattern finds has a value for failure member.</param>
    /// <returns>
    /// The <typeparamref name="TResult"/>.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the functions can be executed.
    /// </exception>
    public TResult Match<TResult>(Func<TValue, TResult> onSuccess, Func<global::MyNamespace.Failure, TResult> onFailure)
    {
        if (index == 0 && onSuccess is not null)
        {
            return onSuccess(success!);
        }

        if (index == 1 && onFailure is not null)
        {
            return onFailure(failure);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref="ResultOf{TValue}" />, and returns a <typeparamref name="TResult"/> as a result.
    /// </summary>
    /// <typeparam name="TResult">The type of the expected result.</typeparam>
    /// <param name="onSuccess">the function that runs when the matching pattern finds has a value for success member.</param>
    /// <param name="onFailure">the function that runs when the matching pattern finds has a value for failure member.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name="TResult"/>.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<TResult> MatchAsync<TResult>(Func<TValue, CancellationToken, Task<TResult>> onSuccess, Func<global::MyNamespace.Failure, CancellationToken, Task<TResult>> onFailure, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onSuccess is not null)
        {
            return await onSuccess(success!, cancellationToken).ConfigureAwait(false);
        }

        if (index == 1 && onFailure is not null)
        {
            return await onFailure(failure, cancellationToken).ConfigureAwait(false);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref="ResultOf{TValue}" />, and returns a <typeparamref name="TResult"/> as a result.
    /// </summary>
    /// <typeparam name="TResult">The type of the expected result.</typeparam>
    /// <param name="onSuccess">the function that runs when the matching pattern finds has a value for success member.</param>
    /// <param name="onFailure">the function that runs when the matching pattern finds has a value for failure member.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name="TResult"/>.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<TResult> MatchAsync<TResult>(Func<TValue, TResult> onSuccess, Func<global::MyNamespace.Failure, CancellationToken, Task<TResult>> onFailure, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onSuccess is not null)
        {
            return onSuccess(success!);
        }

        if (index == 1 && onFailure is not null)
        {
            return await onFailure(failure, cancellationToken).ConfigureAwait(false);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref="ResultOf{TValue}" />, and returns a <typeparamref name="TResult"/> as a result.
    /// </summary>
    /// <typeparam name="TResult">The type of the expected result.</typeparam>
    /// <param name="onSuccess">the function that runs when the matching pattern finds has a value for success member.</param>
    /// <param name="onFailure">the function that runs when the matching pattern finds has a value for failure member.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name="TResult"/>.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<TResult> MatchAsync<TResult>(Func<TValue, CancellationToken, Task<TResult>> onSuccess, Func<global::MyNamespace.Failure, TResult> onFailure, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onSuccess is not null)
        {
            return await onSuccess(success!, cancellationToken).ConfigureAwait(false);
        }

        if (index == 1 && onFailure is not null)
        {
            return onFailure(failure);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes the matching pattern for each of the members of the <see cref="ResultOf{TValue}" />, and returns a new instance of <see cref="ResultOf{TValue}" /> as a result.
    /// </summary>
    /// <typeparam name="TValueNew">The first type of <see cref="ResultOf{TValue}" />.</typeparam>
    /// <param name="onSuccess">the function that runs when the matching pattern finds has a value for success member.</param>
    /// <param name="onFailure">the function that runs when the matching pattern finds has a value for failure member.</param>
    /// <returns>
    /// The <typeparamref name="TResult"/>.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the functions can be executed.
    /// </exception>
    public ResultOf<TValueNew> MatchResultOf<TValueNew>(Func<TValue, ResultOf<TValueNew>> onSuccess, Func<global::MyNamespace.Failure, ResultOf<TValueNew>> onFailure)
    {
        if (index == 0 && onSuccess is not null)
        {
            return onSuccess(success!);
        }

        if (index == 1 && onFailure is not null)
        {
            return onFailure(failure);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref="ResultOf{TValue}" />, and returns a new instance of <see cref="ResultOf{TValue}" /> as a result.
    /// </summary>
    /// <typeparam name="TValueNew">The first type of <see cref="ResultOf{TValue}" />.</typeparam>
    /// <param name="onSuccess">the function that runs when the matching pattern finds has a value for success member.</param>
    /// <param name="onFailure">the function that runs when the matching pattern finds has a value for failure member.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name="TResult"/>.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<ResultOf<TValueNew>> MatchResultOfAsync<TValueNew>(Func<TValue, CancellationToken, Task<ResultOf<TValueNew>>> onSuccess, Func<global::MyNamespace.Failure, CancellationToken, Task<ResultOf<TValueNew>>> onFailure, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onSuccess is not null)
        {
            return await onSuccess(success!, cancellationToken).ConfigureAwait(false);
        }

        if (index == 1 && onFailure is not null)
        {
            return await onFailure(failure, cancellationToken).ConfigureAwait(false);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref="ResultOf{TValue}" />, and returns a new instance of <see cref="ResultOf{TValue}" /> as a result.
    /// </summary>
    /// <typeparam name="TValueNew">The first type of <see cref="ResultOf{TValue}" />.</typeparam>
    /// <param name="onSuccess">the function that runs when the matching pattern finds has a value for success member.</param>
    /// <param name="onFailure">the function that runs when the matching pattern finds has a value for failure member.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name="TResult"/>.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<ResultOf<TValueNew>> MatchResultOfAsync<TValueNew>(Func<TValue, ResultOf<TValueNew>> onSuccess, Func<global::MyNamespace.Failure, CancellationToken, Task<ResultOf<TValueNew>>> onFailure, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onSuccess is not null)
        {
            return onSuccess(success!);
        }

        if (index == 1 && onFailure is not null)
        {
            return await onFailure(failure, cancellationToken).ConfigureAwait(false);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref="ResultOf{TValue}" />, and returns a new instance of <see cref="ResultOf{TValue}" /> as a result.
    /// </summary>
    /// <typeparam name="TValueNew">The first type of <see cref="ResultOf{TValue}" />.</typeparam>
    /// <param name="onSuccess">the function that runs when the matching pattern finds has a value for success member.</param>
    /// <param name="onFailure">the function that runs when the matching pattern finds has a value for failure member.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name="TResult"/>.
    /// </returns>
    /// <exception cref="UnreachableException">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<ResultOf<TValueNew>> MatchResultOfAsync<TValueNew>(Func<TValue, CancellationToken, Task<ResultOf<TValueNew>>> onSuccess, Func<global::MyNamespace.Failure, ResultOf<TValueNew>> onFailure, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onSuccess is not null)
        {
            return await onSuccess(success!, cancellationToken).ConfigureAwait(false);
        }

        if (index == 1 && onFailure is not null)
        {
            return onFailure(failure);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Try to get the success member if exists.
    /// </summary>
    /// <param name="success">
    /// When this method returns, contains the value associated with the success member,
    /// if the success is found; otherwise, the default value for the type of the value parameter.
    /// This parameter is passed uninitialized.
    /// </param>
    /// <returns>
    /// <c>true</c> if the <see cref="ResultOf{TValue}" /> is the success member; otherwise, <c>false</c>.
    /// </returns>
    public bool IsSuccess([NotNullWhen(true)]out TValue? success)
    {
        if (index == 0)
        {
            success = this.success!;
            return true;
        }

        success = default;
        return false;
    }

    /// <summary>
    /// Try to get the failure member if exists.
    /// </summary>
    /// <param name="failure">
    /// When this method returns, contains the value associated with the failure member,
    /// if the failure is found; otherwise, the default value for the type of the value parameter.
    /// This parameter is passed uninitialized.
    /// </param>
    /// <returns>
    /// <c>true</c> if the <see cref="ResultOf{TValue}" /> is the failure member; otherwise, <c>false</c>.
    /// </returns>
    public bool IsFailure([NotNullWhen(true)]out global::MyNamespace.Failure failure)
    {
        if (index == 1)
        {
            failure = this.failure;
            return true;
        }

        failure = default;
        return false;
    }

    /// <summary>
    /// Try to get the notFound member if exists.
    /// </summary>
    /// <param name="notFound">
    /// When this method returns, contains the value associated with the notFound member,
    /// if the notFound is found; otherwise, the default value for the type of the value parameter.
    /// This parameter is passed uninitialized.
    /// </param>
    /// <returns>
    /// <c>true</c> if the <see cref="ResultOf{TValue}" /> is the notFound member; otherwise, <c>false</c>.
    /// </returns>
    public bool IsNotFound([NotNullWhen(true)]out global::MyNamespace.NotFound notFound)
    {
        if (index == 1 && this.failure.IsNotFound(out notFound))
        {
            return true;
        }

        notFound = default;
        return false;
    }

    /// <summary>
    /// Try to get the validation member if exists.
    /// </summary>
    /// <param name="validation">
    /// When this method returns, contains the value associated with the validation member,
    /// if the validation is found; otherwise, the default value for the type of the value parameter.
    /// This parameter is passed uninitialized.
    /// </param>
    /// <returns>
    /// <c>true</c> if the <see cref="ResultOf{TValue}" /> is the validation member; otherwise, <c>false</c>.
    /// </returns>
    public bool IsValidation([NotNullWhen(true)]out global::MyNamespace.Validation validation)
    {
        if (index == 1 && this.failure.IsValidation(out validation))
        {
            return true;
        }

        validation = default;
        return false;
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj) => obj is ResultOf<TValue> other && Equals(other);

    /// <inheritdoc/>
    public bool Equals(ResultOf<TValue>? other) => other is not null && EqualsMembers(other);

    private bool EqualsMembers(ResultOf<TValue> other) =>
        index == other.index &&
        index switch
        {
            0 => Equals(success, other.success),
            1 => Equals(failure, other.failure),
            _ => false
        };

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        unchecked
        {
            int hashCode = index switch
            {
                0 => success?.GetHashCode(),
                1 => failure.GetHashCode(),
                _ => 0
            } ?? 0;
                
            return (hashCode * 397) ^ index;
        }
    }

    /// <inheritdoc/>
    public override string ToString() =>
        index switch
        {
            0 => FormatValue(success),
            1 => FormatValue(failure),
            _ => throw new InvalidOperationException("Unexpected index, which indicates a problem in the Discriminated Union codegen.")
        };

    /// <summary>
    /// Implicitly casts a <typeparamref name="TValue" /> to <see cref="ResultOf{TValue}" />.
    /// </summary>
    /// <param name="_">The <typeparamref name="TValue" /> to be casted into <see cref="ResultOf{TValue}" />.</param>
    /// <returns>
    /// A new instance of <see cref="ResultOf{TValue}" /> casted from <typeparamref name="TValue" />.
    /// </returns>
    public static implicit operator ResultOf<TValue>(TValue _) => new ResultOf<TValue>(0, success: _);

    /// <summary>
    /// Implicitly casts a <see cref="global::MyNamespace.Failure" /> to <see cref="ResultOf{TValue}" />.
    /// </summary>
    /// <param name="_">The <see cref="global::MyNamespace.Failure" /> to be casted into <see cref="ResultOf{TValue}" />.</param>
    /// <returns>
    /// A new instance of <see cref="ResultOf{TValue}" /> casted from <see cref="global::MyNamespace.Failure" />.
    /// </returns>
    public static implicit operator ResultOf<TValue>(global::MyNamespace.Failure _) => new ResultOf<TValue>(1, failure: _);

    /// <summary>
    /// Implicitly casts a <see cref="global::MyNamespace.NotFound" /> to <see cref="ResultOf{TValue}" />.
    /// </summary>
    /// <param name="_">The <see cref="global::MyNamespace.NotFound" /> to be casted into <see cref="ResultOf{TValue}" />.</param>
    /// <returns>
    /// A new instance of <see cref="ResultOf{TValue}" /> casted from <see cref="global::MyNamespace.NotFound" />.
    /// </returns>
    public static implicit operator ResultOf<TValue>(global::MyNamespace.NotFound _) => new ResultOf<TValue>(1, failure: _);

    /// <summary>
    /// Implicitly casts a <see cref="global::MyNamespace.Validation" /> to <see cref="ResultOf{TValue}" />.
    /// </summary>
    /// <param name="_">The <see cref="global::MyNamespace.Validation" /> to be casted into <see cref="ResultOf{TValue}" />.</param>
    /// <returns>
    /// A new instance of <see cref="ResultOf{TValue}" /> casted from <see cref="global::MyNamespace.Validation" />.
    /// </returns>
    public static implicit operator ResultOf<TValue>(global::MyNamespace.Validation _) => new ResultOf<TValue>(1, failure: _);
}

""";

        string expectedFailure = @"// <auto-generated />
#pragma warning disable 1591
#nullable enable

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using System.Threading.Tasks;
using static TypeUnions.Functions;

namespace MyNamespace;
partial struct Failure : IEquatable<Failure>
{
    private readonly int index;
    private readonly global::MyNamespace.NotFound notFound;
    private readonly global::MyNamespace.Validation validation;

    private Failure(int index, global::MyNamespace.NotFound notFound = default, global::MyNamespace.Validation validation = default)
    {
        this.index = index;
        this.notFound = notFound;
        this.validation = validation;
    }

    /// <summary>
    /// Executes the switch pattern for each of the members of the <see cref=""Failure"" />.
    /// </summary>
    /// <param name=""onNotFound"">the action that runs when the switch pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the action that runs when the switch pattern finds has a value for validation member.</param>
    /// <exception cref=""UnreachableException"">
    /// If none of the actions can be executed.
    /// </exception>
    public void Switch(Action<global::MyNamespace.NotFound> onNotFound, Action<global::MyNamespace.Validation> onValidation)
    {
        if (index == 0 && onNotFound is not null)
        {
            onNotFound(notFound);
            return;
        }

        if (index == 1 && onValidation is not null)
        {
            onValidation(validation);
            return;
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the switch pattern for each of the members of the <see cref=""Failure"" />.
    /// </summary>
    /// <param name=""onNotFound"">the action that runs when the switch pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the action that runs when the switch pattern finds has a value for validation member.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the actions can be executed.
    /// </exception>
    public async Task SwitchAsync(Func<global::MyNamespace.NotFound, CancellationToken, Task> onNotFound, Func<global::MyNamespace.Validation, CancellationToken, Task> onValidation, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onNotFound is not null)
        {
            await onNotFound(notFound, cancellationToken).ConfigureAwait(false);
            return;
        }

        if (index == 1 && onValidation is not null)
        {
            await onValidation(validation, cancellationToken).ConfigureAwait(false);
            return;
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the switch pattern for each of the members of the <see cref=""Failure"" />.
    /// </summary>
    /// <param name=""onNotFound"">the action that runs when the switch pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the action that runs when the switch pattern finds has a value for validation member.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the actions can be executed.
    /// </exception>
    public async Task SwitchAsync(Action<global::MyNamespace.NotFound> onNotFound, Func<global::MyNamespace.Validation, CancellationToken, Task> onValidation, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onNotFound is not null)
        {
            onNotFound(notFound);
            return;
        }

        if (index == 1 && onValidation is not null)
        {
            await onValidation(validation, cancellationToken).ConfigureAwait(false);
            return;
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the switch pattern for each of the members of the <see cref=""Failure"" />.
    /// </summary>
    /// <param name=""onNotFound"">the action that runs when the switch pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the action that runs when the switch pattern finds has a value for validation member.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the actions can be executed.
    /// </exception>
    public async Task SwitchAsync(Func<global::MyNamespace.NotFound, CancellationToken, Task> onNotFound, Action<global::MyNamespace.Validation> onValidation, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onNotFound is not null)
        {
            await onNotFound(notFound, cancellationToken).ConfigureAwait(false);
            return;
        }

        if (index == 1 && onValidation is not null)
        {
            onValidation(validation);
            return;
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes the matching pattern for each of the members of the <see cref=""Failure"" />, and returns a <typeparamref name=""TResult""/> as a result.
    /// </summary>
    /// <typeparam name=""TResult"">The type of the expected result.</typeparam>
    /// <param name=""onNotFound"">the function that runs when the matching pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the function that runs when the matching pattern finds has a value for validation member.</param>
    /// <returns>
    /// The <typeparamref name=""TResult""/>.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the functions can be executed.
    /// </exception>
    public TResult Match<TResult>(Func<global::MyNamespace.NotFound, TResult> onNotFound, Func<global::MyNamespace.Validation, TResult> onValidation)
    {
        if (index == 0 && onNotFound is not null)
        {
            return onNotFound(notFound);
        }

        if (index == 1 && onValidation is not null)
        {
            return onValidation(validation);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref=""Failure"" />, and returns a <typeparamref name=""TResult""/> as a result.
    /// </summary>
    /// <typeparam name=""TResult"">The type of the expected result.</typeparam>
    /// <param name=""onNotFound"">the function that runs when the matching pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the function that runs when the matching pattern finds has a value for validation member.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name=""TResult""/>.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<TResult> MatchAsync<TResult>(Func<global::MyNamespace.NotFound, CancellationToken, Task<TResult>> onNotFound, Func<global::MyNamespace.Validation, CancellationToken, Task<TResult>> onValidation, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onNotFound is not null)
        {
            return await onNotFound(notFound, cancellationToken).ConfigureAwait(false);
        }

        if (index == 1 && onValidation is not null)
        {
            return await onValidation(validation, cancellationToken).ConfigureAwait(false);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref=""Failure"" />, and returns a <typeparamref name=""TResult""/> as a result.
    /// </summary>
    /// <typeparam name=""TResult"">The type of the expected result.</typeparam>
    /// <param name=""onNotFound"">the function that runs when the matching pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the function that runs when the matching pattern finds has a value for validation member.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name=""TResult""/>.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<TResult> MatchAsync<TResult>(Func<global::MyNamespace.NotFound, TResult> onNotFound, Func<global::MyNamespace.Validation, CancellationToken, Task<TResult>> onValidation, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onNotFound is not null)
        {
            return onNotFound(notFound);
        }

        if (index == 1 && onValidation is not null)
        {
            return await onValidation(validation, cancellationToken).ConfigureAwait(false);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref=""Failure"" />, and returns a <typeparamref name=""TResult""/> as a result.
    /// </summary>
    /// <typeparam name=""TResult"">The type of the expected result.</typeparam>
    /// <param name=""onNotFound"">the function that runs when the matching pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the function that runs when the matching pattern finds has a value for validation member.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name=""TResult""/>.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<TResult> MatchAsync<TResult>(Func<global::MyNamespace.NotFound, CancellationToken, Task<TResult>> onNotFound, Func<global::MyNamespace.Validation, TResult> onValidation, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onNotFound is not null)
        {
            return await onNotFound(notFound, cancellationToken).ConfigureAwait(false);
        }

        if (index == 1 && onValidation is not null)
        {
            return onValidation(validation);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes the matching pattern for each of the members of the <see cref=""Failure"" />, and returns a new instance of <see cref=""Failure"" /> as a result.
    /// </summary>

    /// <param name=""onNotFound"">the function that runs when the matching pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the function that runs when the matching pattern finds has a value for validation member.</param>
    /// <returns>
    /// The <typeparamref name=""TResult""/>.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the functions can be executed.
    /// </exception>
    public Failure MatchFailure(Func<global::MyNamespace.NotFound, Failure> onNotFound, Func<global::MyNamespace.Validation, Failure> onValidation)
    {
        if (index == 0 && onNotFound is not null)
        {
            return onNotFound(notFound);
        }

        if (index == 1 && onValidation is not null)
        {
            return onValidation(validation);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref=""Failure"" />, and returns a new instance of <see cref=""Failure"" /> as a result.
    /// </summary>

    /// <param name=""onNotFound"">the function that runs when the matching pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the function that runs when the matching pattern finds has a value for validation member.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name=""TResult""/>.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<Failure> MatchFailureAsync(Func<global::MyNamespace.NotFound, CancellationToken, Task<Failure>> onNotFound, Func<global::MyNamespace.Validation, CancellationToken, Task<Failure>> onValidation, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onNotFound is not null)
        {
            return await onNotFound(notFound, cancellationToken).ConfigureAwait(false);
        }

        if (index == 1 && onValidation is not null)
        {
            return await onValidation(validation, cancellationToken).ConfigureAwait(false);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref=""Failure"" />, and returns a new instance of <see cref=""Failure"" /> as a result.
    /// </summary>

    /// <param name=""onNotFound"">the function that runs when the matching pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the function that runs when the matching pattern finds has a value for validation member.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name=""TResult""/>.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<Failure> MatchFailureAsync(Func<global::MyNamespace.NotFound, Failure> onNotFound, Func<global::MyNamespace.Validation, CancellationToken, Task<Failure>> onValidation, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onNotFound is not null)
        {
            return onNotFound(notFound);
        }

        if (index == 1 && onValidation is not null)
        {
            return await onValidation(validation, cancellationToken).ConfigureAwait(false);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Executes asynchronously the matching pattern for each of the members of the <see cref=""Failure"" />, and returns a new instance of <see cref=""Failure"" /> as a result.
    /// </summary>

    /// <param name=""onNotFound"">the function that runs when the matching pattern finds has a value for notFound member.</param>
    /// <param name=""onValidation"">the function that runs when the matching pattern finds has a value for validation member.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    /// A task that represents the asynchronous save operation. The task result contains the
    /// <typeparamref name=""TResult""/>.
    /// </returns>
    /// <exception cref=""UnreachableException"">
    /// If none of the functions can be executed.
    /// </exception>
    public async Task<Failure> MatchFailureAsync(Func<global::MyNamespace.NotFound, CancellationToken, Task<Failure>> onNotFound, Func<global::MyNamespace.Validation, Failure> onValidation, CancellationToken cancellationToken = default)
    {
        if (index == 0 && onNotFound is not null)
        {
            return await onNotFound(notFound, cancellationToken).ConfigureAwait(false);
        }

        if (index == 1 && onValidation is not null)
        {
            return onValidation(validation);
        }

        throw new UnreachableException();
    }

    /// <summary>
    /// Try to get the notFound member if exists.
    /// </summary>
    /// <param name=""notFound"">
    /// When this method returns, contains the value associated with the notFound member,
    /// if the notFound is found; otherwise, the default value for the type of the value parameter.
    /// This parameter is passed uninitialized.
    /// </param>
    /// <returns>
    /// <c>true</c> if the <see cref=""Failure"" /> is the notFound member; otherwise, <c>false</c>.
    /// </returns>
    public bool IsNotFound([NotNullWhen(true)]out global::MyNamespace.NotFound notFound)
    {
        if (index == 0)
        {
            notFound = this.notFound;
            return true;
        }

        notFound = default;
        return false;
    }

    /// <summary>
    /// Try to get the validation member if exists.
    /// </summary>
    /// <param name=""validation"">
    /// When this method returns, contains the value associated with the validation member,
    /// if the validation is found; otherwise, the default value for the type of the value parameter.
    /// This parameter is passed uninitialized.
    /// </param>
    /// <returns>
    /// <c>true</c> if the <see cref=""Failure"" /> is the validation member; otherwise, <c>false</c>.
    /// </returns>
    public bool IsValidation([NotNullWhen(true)]out global::MyNamespace.Validation validation)
    {
        if (index == 1)
        {
            validation = this.validation;
            return true;
        }

        validation = default;
        return false;
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj) => obj is Failure other && Equals(other);

    /// <inheritdoc/>
    public bool Equals(Failure other) => EqualsMembers(other);

    private bool EqualsMembers(Failure other) =>
        index == other.index &&
        index switch
        {
            0 => Equals(notFound, other.notFound),
            1 => Equals(validation, other.validation),
            _ => false
        };

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        unchecked
        {
            int hashCode = index switch
            {
                0 => notFound.GetHashCode(),
                1 => validation.GetHashCode(),
                _ => 0
            };
                
            return (hashCode * 397) ^ index;
        }
    }

    /// <inheritdoc/>
    public override string ToString() =>
        index switch
        {
            0 => FormatValue(notFound),
            1 => FormatValue(validation),
            _ => throw new InvalidOperationException(""Unexpected index, which indicates a problem in the Discriminated Union codegen."")
        };

    /// <summary>
    /// Implicitly casts a <see cref=""global::MyNamespace.NotFound"" /> to <see cref=""Failure"" />.
    /// </summary>
    /// <param name=""_"">The <see cref=""global::MyNamespace.NotFound"" /> to be casted into <see cref=""Failure"" />.</param>
    /// <returns>
    /// A new instance of <see cref=""Failure"" /> casted from <see cref=""global::MyNamespace.NotFound"" />.
    /// </returns>
    public static implicit operator Failure(global::MyNamespace.NotFound _) => new Failure(0, notFound: _);

    /// <summary>
    /// Implicitly casts a <see cref=""global::MyNamespace.Validation"" /> to <see cref=""Failure"" />.
    /// </summary>
    /// <param name=""_"">The <see cref=""global::MyNamespace.Validation"" /> to be casted into <see cref=""Failure"" />.</param>
    /// <returns>
    /// A new instance of <see cref=""Failure"" /> casted from <see cref=""global::MyNamespace.Validation"" />.
    /// </returns>
    public static implicit operator Failure(global::MyNamespace.Validation _) => new Failure(1, validation: _);

    public static bool operator ==(Failure left, Failure right) => left.Equals(right);
    public static bool operator !=(Failure left, Failure right) => !(left == right);
}
";
        (string, string)[] expected =
        [
            (expectedResultOf, "MyNamespace_ResultOf.g.cs"),
            (expectedFailure, "MyNamespace_Failure.g.cs"),
        ];

        SourceCodeGenerationAssertion.AssertCorrectSourceCodeIsGeneratedWithNoDiasnostics(input, expected, 37);
    }
}