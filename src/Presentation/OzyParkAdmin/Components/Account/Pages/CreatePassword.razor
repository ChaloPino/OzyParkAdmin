@page "/Account/CreatePassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using OzyParkAdmin.Domain.Seguridad.Usuarios

@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<Usuario> UserManager

<PageTitle>Crear contraseña</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <MudText Typo="Typo.body1" Align="Align.Center">
            No tiene una contraseña para este sitio. Cree su contraseña para que pueda ingresar
        </MudText>
    </MudItem>
    <MudItem>
        <EditForm Model="Input" method="post" OnValidSubmit="OnCreateSubmitAsync" FormName="confirm">
            <DataAnnotationsValidator />

            <MudText Typo="Typo.h4" Align="Align.Center">Cree su contraseña</MudText>

            <MudStaticTextField @bind-Value="Input.Email" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Email" autocomplete="username"
            Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Ingrese su email" For="() => Input.Email" />

            <MudStaticTextField @bind-Value="Input.Password" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.VisibilityOff" autocomplete="password"
            Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Ingrese su contraseña" For="() => Input.Password" InputType="InputType.Password" />

            <MudStaticTextField @bind-Value="Input.ConfirmPassword" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.VisibilityOff" autocomplete="confirmpassword"
            Class="pb-2" Margin="Margin.Dense" Variant="Variant.Outlined" Label="Confirme su contraseña" For="() => Input.ConfirmPassword" InputType="InputType.Password" />

            <MudStaticButton Class="my-4" FormAction="FormAction.Submit" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">Crear</MudStaticButton>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override void OnInitialized()
    {
        if (UserId is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.UserId = UserId;
    }


    private async Task OnCreateSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !string.Equals(user.Id.ToString(), UserId, StringComparison.OrdinalIgnoreCase) || user.PasswordHash is not null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/CreatePasswordConfirmation");
        }

        var result = await UserManager.AddPasswordAsync(user, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/CreatePasswordConfirmation");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "La {0} debe tener al menos {2} y como máximo {1} caracteres de largo.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Constraseña")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar contraseña")]
        [Compare("Password", ErrorMessage = "La contraseña y la confirmación de contraseña no coinciden.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string UserId { get; set; } = "";
    }
}