@page "/Mantenedores/Servicios"
@using System.Security.Claims
@using OzyParkAdmin.Application
@using OzyParkAdmin.Application.Cajas.List
@using OzyParkAdmin.Application.CentrosCosto.List
@using OzyParkAdmin.Application.Franquicias.List
@using OzyParkAdmin.Application.Plantillas.List
@using OzyParkAdmin.Application.Servicios
@using OzyParkAdmin.Application.Servicios.Activar
@using OzyParkAdmin.Application.Servicios.Desactivar
@using OzyParkAdmin.Application.Servicios.Find
@using OzyParkAdmin.Application.Servicios.List
@using OzyParkAdmin.Application.Servicios.Search
@using OzyParkAdmin.Application.Tramos.List
@using OzyParkAdmin.Application.Zonas.List
@using OzyParkAdmin.Components.Admin.Shared
@using OzyParkAdmin.Domain.Cajas
@using OzyParkAdmin.Domain.CentrosCosto
@using OzyParkAdmin.Domain.Franquicias
@using OzyParkAdmin.Domain.Plantillas
@using OzyParkAdmin.Domain.Servicios
@using OzyParkAdmin.Domain.Shared
@using OzyParkAdmin.Domain.Tramos
@using OzyParkAdmin.Domain.Zonas
@inject IMediator Mediator
@inject ISnackbar Snackbar
<PageTitle>Servicios</PageTitle>
<MudText Typo="Typo.h4">Servicios</MudText>

<MudDataGrid @ref="dataGrid" T="ServicioViewModel" ReadOnly="false" Striped="true" Hover="true" ShowMenuIcon="true"
             ServerData="LoadServiciosAsync" SortMode="SortMode.Multiple"
             Filterable="true" FilterMode="DataGridFilterMode.ColumnFilterRow"
             EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" EditDialogOptions="dialogOptions"
             StartedEditingItem="StartEditing" CanceledEditingItem="CancelEditing" CommittedItemChanges="SaveServicioAsync">
    <ToolBarContent>
        <MudSpacer />
        <SearchControl @bind-SearchText="searchText" />
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Class="ml-3" OnClick="AddServicioAsync">Nuevo servicio</MudButton>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="ServicioViewModel" />
        <PropertyColumn Property="x => x.CentroCosto.Nombre" Title="Centro de costo">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.CentroCosto" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Label="Centro de costo" Required="true" ToStringFunc="(x) => x?.Nombre" Class="mt-4"
                           Disabled="!context.Item.IsNew">
                    <ForIn Items="centrosCosto" Context="centroCosto">
                        <MudSelectItem T="CentroCostoModel" Value="centroCosto"></MudSelectItem>
                    </ForIn>
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.FranquiciaId" Hidden="true" Title="Franquicia" Filterable="false" Sortable="false">
            <EditTemplate>
                <MudSelect T="int" Value="context.Item.FranquiciaId" ValueChanged="async (franquiciaId) => await FranquiciaChanged(context, franquiciaId)" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Label="Franquicia" Required="true" Class="mt-4"
                           Disabled="!context.Item.IsNew">
                    <ForIn Items="franquicias" Context="franquicia">
                        <MudSelectItem T="int" Value="franquicia.Id">@franquicia.Nombre</MudSelectItem>
                    </ForIn>
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Aka" Title="Aka" />
        <PropertyColumn Property="x => x.Nombre" Title="Nombre" />
        <PropertyColumn Property="x => x.TipoServicio" Title="Tipo servicio">
            <FilterTemplate>
                <TipoServicioFilter FilterContext="context" />
            </FilterTemplate>
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.TipoServicio" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Label="Tipo servicio" Required="true" Class="mt-4">
                    <MudSelectItem T="TipoServicio" Value="TipoServicio.SoloIda">Solo ida</MudSelectItem>
                    <MudSelectItem T="TipoServicio" Value="TipoServicio.IdaVuelta">Ida y vuelta</MudSelectItem>
                    <MudSelectItem T="TipoServicio" Value="TipoServicio.Ilimitado">Ilimitado</MudSelectItem>
                </MudSelect>
            </EditTemplate>
            <CellTemplate>
                <TipoServicioDisplay TipoServicio="context.Item.TipoServicio" />
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.TipoDistribucion.Nombre" Title="Tipo distribución">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.TipoDistribucion" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Label="Tipo distribución" Required="true" ToStringFunc="(x) => x?.Nombre" Class="mt-4">
                    <ForIn Items="tiposDistribucion" Context="tipoDitribucion">
                        <MudSelectItem T="TipoDistribucionModel" Value="tipoDitribucion"></MudSelectItem>
                    </ForIn>
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.TipoVigencia" Hidden="true" Title="Vigencia">
            <EditTemplate>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4">
                    <MudSelect @bind-Value="context.Item.TipoVigencia" Variant="Variant.Outlined" Margin="Margin.Dense"
                               Label="Vigencia" Required="true" ToStringFunc="(x) => x?.Nombre">
                        <ForIn Items="tiposVigencia" Context="tipoVigencia">
                            <MudSelectItem T="TipoVigenciaModel" Value="tipoVigencia"></MudSelectItem>
                        </ForIn>
                    </MudSelect>

                    <MudNumericField @bind-Value="context.Item.NumeroVigencia" Variant="Variant.Outlined" Margin="Margin.Dense"
                                     Label="@context.Item.TipoVigencia.ToLabel()" Required="true" />
                </MudStack>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.NumeroValidez" Hidden="true" Title="Validez">
            <EditTemplate>
                <MudNumericField @bind-Value="context.Item.NumeroValidez" Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Label="Validez" Required="true" Adornment="Adornment.End" AdornmentText="días" Class="mt-4" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.NumeroPaxMinimo" Hidden="true">
            <EditTemplate>
                <MudNumericField @bind-Value="context.Item.NumeroPaxMinimo" Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Label="Mín. pasajeros" Required="true" Class="mt-4" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.NumeroPaxMaximo" Hidden="true">
            <EditTemplate>
                <MudNumericField @bind-Value="context.Item.NumeroPaxMaximo" Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Label="Max. pasajeros" Required="true" Class="mt-4" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.TipoControl" Hidden="true">
            <EditTemplate>
                <MudSelect @bind-Value="context.Item.TipoControl" Variant="Variant.Outlined" Margin="Margin.Dense"
                            Label="Tipo control" Required="true" ToStringFunc="(x) => x?.Nombre" Class="mt-4">
                    <ForIn Items="tiposControl" Context="tipoControl">
                        <MudSelectItem T="TipoControlModel" Value="tipoControl"></MudSelectItem>
                    </ForIn>
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.EsConHora" Hidden="true" Title="Con hora">
            <EditTemplate>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4">
                    <MudSwitch @bind-Value="context.Item.EsConHora" Label="Con hora" Color="Color.Primary" />
                    <MudSwitch @bind-Value="context.Item.EsPorTramos" Label="Pro tramos" Color="Color.Primary" />
                    <MudSwitch @bind-Value="context.Item.EsParaVenta" Label="Para venta" Color="Color.Primary" />
                </MudStack>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.HolguraInicio" Hidden="true">
            <EditTemplate>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4">
                    <MudTimePicker @bind-Time="context.Item.HolguraInicio" Variant="Variant.Outlined" Margin="Margin.Dense"
                                    Label="Holgura inicio" Required="false" />
                    <MudTimePicker @bind-Time="context.Item.HolguraFin" Variant="Variant.Outlined" Margin="Margin.Dense"
                                   Label="Holgura fin" Required="false" />
                </MudStack>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Orden" Title="Orden" />
        <PropertyColumn Property="x => x.EsParaMovil" Hidden="true">
            <EditTemplate>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4">
                    <MudSwitch @bind-Value="context.Item.EsParaMovil" Label="Es para móviles" Color="Color.Primary" />
                    <MudSwitch @bind-Value="context.Item.MostrarTramos" Label="Mostrar tramos" Color="Color.Primary" Disabled="!context.Item.EsParaMovil" />
                </MudStack>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.EsParaBuses" Hidden="true">
            <EditTemplate>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4">
                    <MudSwitch @bind-Value="context.Item.EsParaBuses" Label="Es para móviles" Color="Color.Primary" />
                    <MudSelect @bind-Value="context.Item.IdaVuelta" Variant="Variant.Outlined" Margin="Margin.Dense"
                               Label="Tipo bus" Disabled="!context.Item.EsParaBuses">
                        <MudSelectItem T="TipoServicio?"></MudSelectItem>
                        <MudSelectItem T="TipoServicio?" Value="TipoServicio.SoloIda">Solo ida</MudSelectItem>
                        <MudSelectItem T="TipoServicio?" Value="TipoServicio.IdaVuelta">Ida y vuelta</MudSelectItem>
                        <MudSelectItem T="TipoServicio?" Value="TipoServicio.Ilimitado">Ilimitado</MudSelectItem>
                    </MudSelect>
                </MudStack>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.HolguraEntrada" Hidden="true">
            <EditTemplate>
                <MudNumericField @bind-Value="context.Item.HolguraEntrada" Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Label="Holgura de entrada (mins.)" Required="true" Class="mt-4" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Politicas" Hidden="true">
            <EditTemplate>
                <MudTextField @bind-Value="context.Item.Politicas" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="4"
                                 Label="Políticas" Required="false" Class="mt-4" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ControlParental" Hidden="true">
            <EditTemplate>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4">
                    <MudSwitch @bind-Value="context.Item.ControlParental" Label="Control parental" Color="Color.Primary" />
                    <MudSelect @bind-Value="context.Item.ServicioResponsableId" Variant="Variant.Outlined" Margin="Margin.Dense"
                               Label="Servicio responsable" Disabled="!context.Item.ControlParental">
                        <MudSelectItem T="int?" Value="(int?)null"></MudSelectItem>
                        <ForIn Items="servicios" Context="servicio">
                            <MudSelectItem T="int?" Value="servicio.Id">@servicio.Nombre</MudSelectItem>
                        </ForIn>
                    </MudSelect>
                </MudStack>
            </EditTemplate>
        </PropertyColumn>
         <PropertyColumn Property="x => x.PlantillaId" Hidden="true">
            <EditTemplate>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-4">
                    <MudSelect @bind-Value="context.Item.PlantillaId" Variant="Variant.Outlined" Margin="Margin.Dense"
                               Label="Plantilla">
                        <ForIn Items="plantillas" Context="plantilla">
                            <MudSelectItem T="int" Value="plantilla.Id">@plantilla.Descripcion</MudSelectItem>
                        </ForIn>
                    </MudSelect>
                    <MudSelect @bind-Value="context.Item.PlantillaDigitalId" Variant="Variant.Outlined" Margin="Margin.Dense"
                               Label="Plantilla Digital">
                        <ForIn Items="plantillas" Context="plantilla">
                            <MudSelectItem T="int" Value="plantilla.Id">@plantilla.Descripcion</MudSelectItem>
                        </ForIn>
                    </MudSelect>
                </MudStack>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.EsActivo" Editable="false" Title="Estado">
            <FilterTemplate>
                <IsActiveFilter FilterContext="context" />
            </FilterTemplate>
            <CellTemplate>
                <StateControl State="@context.Item.EsActivo" CanChangeStatus="true" TrueLabel="Habilitado" FalseLabel="Deshabilitado"
                              StateChanged="async (esActivo) => await SaveEsActivoAsync(context.Item, esActivo)"/>
            </CellTemplate>
        </PropertyColumn>
        <TemplateColumn>
            <CellTemplate>
                <div class="d-flex justify-end">
                    <MudTooltip Text="Editar">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="context.Actions.StartEditingItemAsync" />
                    </MudTooltip>
                    <MudTooltip Text="Asignar centros de costo">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Apartment" OnClick="async () => await ShowCentrosCostoAsync(context)" />
                    </MudTooltip>
                    <MudTooltip Text="Asignar tramos">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Route" OnClick="async () => await ShowTramosAsync(context)" />
                    </MudTooltip>
                    <MudTooltip Text="Asignar permisos">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.DoorFront" OnClick="async () => await ShowPermisosAsync(context)" />
                    </MudTooltip>
                    <MudTooltip Text="Asignar zonas">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.FmdGood" OnClick="async () => await ShowZonasAsync(context)" />
                    </MudTooltip>
                    <MudTooltip Text="Asignar grupos etarios">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.FamilyRestroom" OnClick="async () => await ShowGruposEtariosAsync(context)" />
                    </MudTooltip>
                    <MudTooltip Text="Asignar cajas">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Devices" OnClick="async () => await ShowCajasAsync(context)" />
                    </MudTooltip>
                </div>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@context.Item.Nombre</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudSimpleTable Style="max-width: 50%;">
                    <tr>
                        <th style="text-align: start;">Vigencia</th>
                        <td>@context.Item.Vigencia</td>
                    </tr>
                    <tr>
                        <th style="text-align: start;">Validez</th>
                        <td>@context.Item.Validez</td>
                    </tr>
                    <tr>
                        <th style="text-align: start;">Es con hora</th>
                        <td>
                            <StateControl State="@context.Item.EsConHora" />
                        </td>
                    </tr>
                    <tr>
                        <th style="text-align: start;">Es por tramos</th>
                        <td>
                            <StateControl State="@context.Item.EsPorTramos" />
                        </td>
                    </tr>
                    <tr>
                        <th style="text-align: start;">Es para venta</th>
                        <td>
                            <StateControl State="@context.Item.EsParaVenta" />
                        </td>
                    </tr>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="ServicioViewModel" />
    </PagerContent>
</MudDataGrid>

<CentrosCostoDialog @bind-IsOpen="openCentrosCosto" CentrosCosto="centrosCosto" Servicio="currentServicio" CommitChanges="SaveCentrosCostoAsync" DialogOptions="dialogOptions" />
<TramosDialog @bind-IsOpen="openTramos" CentrosCosto="centrosCosto" Tramos="tramos" Servicio="currentServicio" CommitChanges="SaveTramosAsync" DialogOptions="dialogOptions" />
<PermisosDialog @bind-IsOpen="openPermisos" CentrosCosto="centrosCosto" Tramos="tramos" Servicio="currentServicio" CommitChanges="SavePermisosAsync" DialogOptions="dialogOptions" />
<ZonasDialog @bind-IsOpen="openZonas" Tramos="tramos" Zonas="zonas" Servicio="currentServicio" CommitChanges="SaveZonasAsync" DialogOptions="dialogOptions" />
<GruposEtariosDialog @bind-IsOpen="openGruposEtarios" GruposEtarios="gruposEtarios" Servicio="currentServicio" CommitChanges="SaveGruposEtariosAsync" DialogOptions="dialogOptions" />
<CajasDialog @bind-IsOpen="openCajas" Cajas="cajas" Servicio="currentServicio" CommitChanges="SaveCajasAsync" DialogOptions="dialogOptions" />

@code {
    private static readonly DialogOptions dialogOptions = new()
        {
            Position = DialogPosition.Center,
            FullWidth = true,
            BackdropClick = false,
        };

    private ClaimsPrincipal? user;
    private MudDataGrid<ServicioViewModel> dataGrid = default!;
    private ObservableGridData<ServicioViewModel>? currentServicios;
    private string? searchText;
    private List<FranquiciaModel> franquicias = [];
    private List<CentroCostoModel> centrosCosto = [];
    private List<TipoControlModel> tiposControl = [];
    private List<TipoDistribucionModel> tiposDistribucion = [];
    private List<TipoVigenciaModel> tiposVigencia = [];
    private List<TramoModel> tramos = [];
    private List<ZonaModel> zonas = [];
    private List<GrupoEtarioModel> gruposEtarios = [];
    private List<CajaModel> cajas = [];
    private List<ServicioModel> servicios = [];
    private List<Plantilla> plantillas = [];

    private bool openCentrosCosto;
    private bool openTramos;
    private bool openPermisos;
    private bool openZonas;
    private bool openGruposEtarios;
    private bool openCajas;
    private ServicioViewModel? currentServicio;


    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = (await AuthenticationState).User;
        await LoadReferencesAsync();
    }

    private async Task LoadReferencesAsync()
    {
        Task[] loadingTasks = 
        [
            LoadCentrosCostoAsync(), LoadFranquiciasAsync(), LoadTiposControlAsync(), 
            LoadTiposDistribucionAsync(), LoadTiposVigenciaAsync(), LoadTramosAsync(),
            LoadZonasAsync(), LoadGruposEtariosAsync(), LoadCajasAsync(), LoadPlantillasAsync()
        ];

        await Task.WhenAll(loadingTasks);
    }

    private async Task LoadCentrosCostoAsync()
    {
        ResultListOf<CentroCostoInfo> result = await Mediator.SendRequest(new ListCentrosCosto(user!));
        centrosCosto = result.Items.ToModel();
    }

    private async Task LoadFranquiciasAsync()
    {
        ResultListOf<Franquicia> result = await Mediator.SendRequest(new ListFranquicias(user!));
        franquicias = result.Items.ToModel();
    }

    private async Task LoadTiposControlAsync()
    {
        ResultListOf<TipoControl> result = await Mediator.SendRequest(new ListTiposControl());
        tiposControl = result.Items.ToModel();
    }

    private async Task LoadTiposDistribucionAsync()
    {
        ResultListOf<TipoDistribucion> result = await Mediator.SendRequest(new ListTiposDistribucion());
        tiposDistribucion = result.Items.ToModel();
    }

    private async Task LoadTiposVigenciaAsync()
    {
        ResultListOf<TipoVigencia> result = await Mediator.SendRequest(new ListTiposVigencia());
        tiposVigencia = result.Items.ToModel();
    }

    private async Task LoadTramosAsync()
    {
        ResultListOf<TramoInfo> result = await Mediator.SendRequest(new ListTramos());
        tramos = result.Items.ToModel();
    }

    private async Task LoadZonasAsync()
    {
        ResultListOf<ZonaInfo> result = await Mediator.SendRequest(new ListZonas());
        zonas = result.Items.ToModel();
    }

    private async Task LoadGruposEtariosAsync()
    {
        ResultListOf<GrupoEtarioInfo> result = await Mediator.SendRequest(new ListGruposEtarios());
        gruposEtarios = result.Items.ToModel();
    }

    private async Task LoadCajasAsync()
    {
        ResultListOf<CajaInfo> result = await Mediator.SendRequest(new ListCajas(user!));
        cajas = result.Items.ToModel();
    }

    private async Task LoadPlantillasAsync()
    {
        ResultListOf<Plantilla> result = await Mediator.SendRequest(new ListPlantillas());
        plantillas = result.Items.ToList();
    }

    private async Task LoadServiciosAsync(int franquiciaId)
    {
        ResultListOf<ServicioInfo> result = await Mediator.SendRequest(new ListServicios(franquiciaId));
        servicios = result.Items.ToModel();
    }

    public async Task<GridData<ServicioViewModel>> LoadServiciosAsync(GridState<ServicioViewModel> state)
    {
        SearchServicios searchServicios = state.ToSearch(user!, searchText);
        PagedList<ServicioFullInfo> servicios = await Mediator.SendRequest(searchServicios);
        currentServicios = servicios.ToGridData(dataGrid);
        return currentServicios;
    }

    private async Task FranquiciaChanged(CellContext<ServicioViewModel> context, int franquiciaId)
    {
        context.Item.FranquiciaId = franquiciaId;
        await LoadServiciosAsync(franquiciaId);
    }

    private async Task AddServicioAsync()
    {
        ServicioViewModel newServicio = new() 
        { 
            IsNew = true,
            FranquiciaId = franquicias.First().Id,
            CentroCosto = centrosCosto.First(),
            TipoDistribucion = tiposDistribucion.First(),
            TipoVigencia = tiposVigencia.First(),
            PlantillaId = plantillas.First().Id,
            PlantillaDigitalId = plantillas.First().Id,
        };
        currentServicios?.Add(newServicio);
        await new CellContext<ServicioViewModel>(dataGrid, newServicio).Actions.StartEditingItemAsync();
    }

    private async Task StartEditing(ServicioViewModel servicio)
    {
        await LoadServiciosAsync(servicio.FranquiciaId);
    }

    private void CancelEditing(ServicioViewModel servicio)
    {
        if (servicio.IsNew)
        {
            currentServicios?.Remove(servicio);
        }
    }

    private async Task ShowCentrosCostoAsync(CellContext<ServicioViewModel> context)
    {
        if (await LoadServicioDetailAsync(context.Item))
        {
            currentServicio = context.Item;
            openCentrosCosto = true;
        }
    }

    private async Task ShowTramosAsync(CellContext<ServicioViewModel> context)
    {
        if (await LoadServicioDetailAsync(context.Item))
        {
            currentServicio = context.Item;
            openTramos = true;
        }
    }

    private async Task ShowPermisosAsync(CellContext<ServicioViewModel> context)
    {
        if (await LoadServicioDetailAsync(context.Item))
        {
            currentServicio = context.Item;
            openPermisos = true;
        }
    } 

    private async Task ShowZonasAsync(CellContext<ServicioViewModel> context)
    {
        if (await LoadServicioDetailAsync(context.Item))
        {
            currentServicio = context.Item;
            openZonas = true;
        }
    }

    private async Task ShowGruposEtariosAsync(CellContext<ServicioViewModel> context)
    {
        if (await LoadServicioDetailAsync(context.Item))
        {
            currentServicio = context.Item;
            openGruposEtarios = true;
        }
    }

    private async Task ShowCajasAsync(CellContext<ServicioViewModel> context)
    {
        if (await LoadServicioDetailAsync(context.Item))
        {
            currentServicio = context.Item;
            openCajas = true;
        }
    }

    private async Task<bool> LoadServicioDetailAsync(ServicioViewModel servicio)
    {
        if (!servicio.DetailLoaded)
        {
            ResultOf<ServicioFullInfo> result = await Mediator.SendRequest(new FindServicio(servicio.Id));

            return result.Match(
                onSuccess: info => LoadServicioInfo(servicio, info),
                onFailure: AddFailure);
        }

        return true;
    }

    private bool AddFailure(Failure failure)
    {
        Snackbar.AddFailure(failure, "cargar el detalle del servicio");
        return false;
    }

    private bool LoadServicioInfo(ServicioViewModel servicio, ServicioFullInfo info)
    {
        servicio.DetailLoaded = true;
        servicio.Cajas = info.Cajas.ToModel();
        servicio.CentrosCosto = info.CentrosCosto.ToModel();
        servicio.GruposEtarios = info.GruposEtarios.ToModel();
        servicio.Permisos = info.Permisos.ToModel();
        servicio.Tramos = info.Tramos.ToModel();
        servicio.Zonas = info.Zonas.ToModel();
        return true;
    }

    private async Task SaveServicioAsync(ServicioViewModel servicio)
    {
        IServicioStateChangeable changeStatus = servicio.IsNew
            ? servicio.ToCreate()
            : servicio.ToUpdate();

        var result = await Mediator.SendRequest(changeStatus);
        if (!UpdateServicio(servicio, result, servicio.IsNew ? "crear servicio" : "modificar servicio"));
        {
            await new CellContext<ServicioViewModel>(dataGrid, servicio).Actions.StartEditingItemAsync();
        }
    }

    private async Task SaveEsActivoAsync(ServicioViewModel servicio, bool esActivo)
    {
        IServicioStateChangeable changeStatus = esActivo
            ? new ActivarServicio(servicio.Id)
            : new DesactivarServicio(servicio.Id);

        var result = await Mediator.SendRequest(changeStatus);
        UpdateServicio(servicio, result, esActivo ? "activar servicio" : "desactivar servicio");
    }

    private async Task<bool> SaveCentrosCostoAsync(ServicioViewModel servicio)
    {
        IServicioStateChangeable changeStatus = servicio.ToAssignCentrosCosto();
        var result = await Mediator.SendRequest(changeStatus);
        return UpdateServicio(servicio, result, "asignar centros de costo");
    }

    private async Task<bool> SaveTramosAsync(ServicioViewModel servicio)
    {
        IServicioStateChangeable changeStatus = servicio.ToAssignTramos();
        var result = await Mediator.SendRequest(changeStatus);
        return UpdateServicio(servicio, result, "asignar tramos");
    }

    private async Task<bool> SavePermisosAsync(ServicioViewModel servicio)
    {
        IServicioStateChangeable changeStatus = servicio.ToAssignPermisos();
        var result = await Mediator.SendRequest(changeStatus);
        return UpdateServicio(servicio, result, "asignar permisos");
    }

    private async Task<bool> SaveZonasAsync(ServicioViewModel servicio)
    {
        IServicioStateChangeable changeStatus = servicio.ToAssignZonas();
        var result = await Mediator.SendRequest(changeStatus);
        return UpdateServicio(servicio, result, "asignar zonas");
    }

    private async Task<bool> SaveGruposEtariosAsync(ServicioViewModel servicio)
    {
        IServicioStateChangeable changeStatus = servicio.ToAssignGruposEtarios();
        var result = await Mediator.SendRequest(changeStatus);
        return UpdateServicio(servicio, result, "asignar grupos etarios");
    }

    private async Task<bool> SaveCajasAsync(ServicioViewModel servicio)
    {
        IServicioStateChangeable changeStatus = servicio.ToAssignCajas();
        var result = await Mediator.SendRequest(changeStatus);
        return UpdateServicio(servicio, result, "asignar cajas");
    }

    private bool UpdateServicio(ServicioViewModel servicio, ResultOf<ServicioFullInfo> result, string action)
    {
        return result.Match(
           onSuccess: (info) => UpdateServicio(servicio, info),
           onFailure: (failure) => AddFailure(failure, action)
       );
    }

    private bool UpdateServicio(ServicioViewModel servicio, ServicioFullInfo info)
    {
        servicio.Update(info);
        return true;
    }

    private bool AddFailure(Failure failure, string action)
    {
        Snackbar.AddFailure(failure, action);
        return false;
    }
}
