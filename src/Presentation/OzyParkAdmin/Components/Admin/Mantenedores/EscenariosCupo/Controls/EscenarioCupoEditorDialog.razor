@page "/escenario-cupo-editor-dialog"
@using OzyParkAdmin.Components.Admin.Mantenedores.EscenariosCupo.Models
@using OzyParkAdmin.Components.Admin.Mantenedores.EscenariosCupo.Controls
@using OzyParkAdmin.Components.Admin.Mantenedores.EscenariosCupo.Validators
@using MudBlazor

@inject EscenarioCupoValidator Validator
@inject IMediator Mediator
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudStepper Vertical NonLinear OnPreviewInteraction="OnPreviewInteraction" ActiveIndex="_activeStep" ActiveIndexChanged="OnActiveIndexChanged">

    <ChildContent>
        <MudStep Title="Escenario Cupo" SecondaryText="Información básica del escenario" HasError="@(!_formEscenarioCupoValido && _hasAttemptedValidation && _fieldsModified)">

            <CreateEscenarioCupoLayout @ref="_editEscenarioCupoForm"
                                       Validator="Validator"
                                       escenarioCupo="SelectedEscenarioCupo"
                                       CentrosCostos="CentrosCostos"
                                       Zonas="Zonas"
                                       OnFormValidChange="@(valid => OnFieldChanged(valid))" />
        </MudStep>
        <MudStep Title="Detalles" SecondaryText="Agregar detalles obligatorios" HasError="@(!SelectedEscenarioCupo.Detalles.Any() && _hasAttemptedValidation)">
            <CreateDetalleEscenarioCupoLayout Detalles="SelectedEscenarioCupo.Detalles"
                                              Servicios="Servicios"
                                              EscenarioSeleccionado="SelectedEscenarioCupo"
                                              OnDetalleAgregado="OnDetalleAgregado" />
        </MudStep>
        <MudStep Title="Exclusiones" SecondaryText="Opcional" HasError="false">
            <CreateExclusionesPorFechaLayout Exclusiones="SelectedEscenarioCupo.ExclusionesFecha"
                                             CanalesVentaDisponibles="CanalesVenta"
                                             ServiciosDisponibles="Servicios"
                                             OnExclusionAgregada="OnExclusionAgregada" />
        </MudStep>
    </ChildContent>
    <ActionContent Context="stepper">
        <MudButton OnClick="@(() => stepper.ResetAsync())">Reset</MudButton>
        @if (!_completed)
        {
            <MudIconButton OnClick="@(() => stepper.PreviousStepAsync())" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Disabled="@(_index <= 0)" />
            <MudSpacer />
            @if (stepper.Steps[_index].Skippable == true)
            {
                <MudIconButton OnClick="@(() => stepper.SkipCurrentStepAsync())" Icon="@stepper.SkipButtonIcon" Color="Color.Primary" />
            }
            <MudIconButton OnClick="@(() => stepper.NextStepAsync())" Icon="@Icons.Material.Filled.ArrowForward" Color="Color.Primary" />
        }
    </ActionContent>

</MudStepper>
